var callbackToPromise=function(){"use strict";var w=Object.defineProperty;var A=(u,n,r)=>n in u?w(u,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):u[n]=r;var b=(u,n,r)=>(A(u,typeof n!="symbol"?n+"":n,r),r);const u=(c,l)=>{const e=c.indexOf(l);e>-1&&c.splice(e,1)},n=(c,l)=>setTimeout(()=>{l>0&&c("execution time timeout")},l*1e3);class r{constructor(){b(this,"value");b(this,"updated",()=>{});let l=this;this.value=new Proxy([],{get(e,a,s){return Reflect.get(e,a,s)},set(e,a,s,t){let k=e[a];return Reflect.set(e,a,s,t),l.updated(k,s),!0}})}}const v=(c,l)=>{c.updated=l};function p(c,l){const{wait:e="all",output:a="sort",second:s=0}=l||{};let t=[],h=0;return(...i)=>new Promise((m,T)=>{try{let x=n(T,s),d=new r;for(let o in i)if(toString.call(i[o])==="[object Function]"){const f=i[o];d.value.push(f),(!Array.isArray(e)||e.includes(parseInt(o)))&&(i[o]=()=>{t.push({callback:i[o],result:f()}),u(d.value,f)})}h=d.value.length,v(d,()=>{(e==="all"&&t.length===h||Array.isArray(e)&&t.length===e.length)&&(clearTimeout(x),a==="sort"&&(t=t.sort((o,f)=>{const y=i.indexOf(o.callback),O=i.indexOf(f.callback);return y-O}),m(t)),a==="order"&&m(t)),e==="race"&&t.length&&m([t[0]])}),c(...i)}catch(x){T(x)}})}return p}();
